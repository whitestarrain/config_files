#!/usr/bin/env bash

set -e

IMAGE_DEST_DIR_RELATIVE_PATH="image"
SKIP_CONFIRM=false
SKIP_ERROR=false

echo_help() {
  echo "usage: $(basename "$0") [-d] markdown_file destination"
  echo '  -d, --image_dir_path       Default "image", A image folder relative to the destination path'
  echo '  -n, --no-confirm           Skip confirmation'
  echo '  -e, --skip-error           Continue moving files when errors occur'
}

if [[ $# -lt 2 ]]; then
  echo_help
  exit 0
fi

while [ $# -gt 0 ]; do
  case $1 in
  -h | --help)
    echo_help
    exit
    ;;
  -d | --image_dir_name)
    IMAGE_DEST_DIR_RELATIVE_PATH="$2"
    shift
    ;;
  -n | --no-confirm)
    SKIP_CONFIRM=true
    ;;
  -e | --skip_erroe)
    SKIP_ERROR=true
    ;;
  *)
    break
    ;;
  esac
  shift
done

if [[ $# -ne 2 || -z $1 || -z $2 ]]; then
  echo_help
  exit
fi

markdown_file="$(realpath "$1")"
move_to="$(realpath "$2")"

if [[ ! -f "${markdown_file}" ]]; then
  echo "file ${markdown_file} does not exist"
  exit 1
fi

if [[ -f "${move_to}" ]]; then
  echo "${move_to} exists"
  exit 1
fi

if [[ -d "${move_to}" ]]; then
  move_to="$move_to/$(basename "$markdown_file")"
fi

echo -e move "$markdown_file to $move_to,"
echo "image dir path is: $IMAGE_DEST_DIR_RELATIVE_PATH"

IFS=$'\n' read -r -d '' -a image_relative_paths < <(awk '{
      a = match($0,/!\[.*\]\((.*)\)/,capture_group);
      if(a!=0){
        print(capture_group[1])
      }
    }' "$markdown_file") || echo ""

declare -a move_commands
declare -a sed_image_path_commands

# move images
move_to_img_dir="$(dirname "$move_to")/$IMAGE_DEST_DIR_RELATIVE_PATH"
if [[ ! -d "$move_to_img_dir" ]]; then
  mkdir -p "$move_to_img_dir"
fi
for image_relative_path in "${image_relative_paths[@]}"; do
  image_path="$(dirname "$markdown_file")/$image_relative_path"
  if [[ ! -f "${image_path}" ]]; then
    continue
  fi
  image_path="$(realpath "$image_path")"
  image_name="$(basename "$image_path")"
  dest_image_path=$(realpath "$move_to_img_dir/$image_name")

  # move image file
  if [[ "$image_path" != "$dest_image_path" ]]; then
    mv_image_command="mv $image_path $dest_image_path"
    move_commands=("${move_commands[@]}" "$mv_image_command")
  fi
  # change image path in markdown file
  if [[ "$move_to_img_dir/$image_name" != "$image_relative_path" ]]; then
    sed_command="sed -i 's#$image_relative_path#$IMAGE_DEST_DIR_RELATIVE_PATH/$image_name#g' $markdown_file"
    sed_image_path_commands=("${sed_image_path_commands[@]}" "$sed_command")
  fi
done

# move markdown file
move_commands=("${move_commands[@]}" "mv $markdown_file $move_to")

continue_flag=no
if [[ $SKIP_CONFIRM == true ]]; then
  continue_flag=yes
else
  printf "%s\n" "${sed_image_path_commands[@]}"
  printf "%s\n" "${move_commands[@]}"
  echo -e "\n \e[0;31mThe above commands will be executed, do you want to continue?\e[m (yes/no):\n "
  read -r -p " :" continue_flag
fi

if [[ "${continue_flag}" != 'yes' ]]; then
  exit 0
fi

for cmd in "${sed_image_path_commands[@]}" "${move_commands[@]}"; do
  if [[ $SKIP_ERROR == true ]]; then
    eval "$cmd || test true"
  else
    eval "$cmd"
  fi
done
